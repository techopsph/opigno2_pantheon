<?php

/**
 * @file
 * Enables Group functionality for the Node module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Url;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function gnode_node_type_insert(NodeTypeInterface $node_type) {
  \Drupal::service('plugin.manager.group_content_enabler')->clearCachedDefinitions();
}

/**
 * Implements hook_node_access().
 *
 * When trying to view, update or delete a node it suffices to have the right to
 * do so in only one group the node belongs to. If you wish to prevent any such
 * action on your own terms, implement hook_node_access() in your module.
 */
function gnode_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
  if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Some modules, including the code in \Drupal\node\NodeForm::access() may
  // check for 'view', 'update' or 'delete' access on new nodes, even though
  // that makes little sense. We need to account for it to avoid crashes because
  // we would otherwise query the DB with a non-existent node ID.
  if ($node->isNew()) {
    return AccessResult::neutral();
  }

  $plugin_id = 'group_node:' . $node->bundle();

  /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
  $plugin_manager = \Drupal::service('plugin.manager.group_content_enabler');
  $permission_provider = $plugin_manager->getPermissionProvider($plugin_id);

    // Load all of the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByEntity($node);

  // If the node does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }

  // From this point on you need group to allow you to perform the operation.
  switch ($op) {
    case 'view':
      foreach ($groups as $group) {
        if ($node->isPublished()) {
          if ($group->hasPermission($permission_provider->getEntityViewPermission(), $account)) {
            return AccessResult::allowed();
          }
        }
        elseif ($group->hasPermission($permission_provider->getEntityViewUnpublishedPermission(), $account)) {
          return AccessResult::allowed();
        }
      }
      break;

    case 'update':
    case 'delete':
      foreach ($groups as $group) {
        if ($group->hasPermission($permission_provider->getPermission($op, 'entity'), $account)) {
          return AccessResult::allowed();
        }
        elseif ($account->id() == $node->getOwnerId() && $group->hasPermission($permission_provider->getPermission($op, 'entity', 'own'), $account)) {
          return AccessResult::allowed();
        }
      }
      break;
  }

  // Instead of outright forbidding access when no group granted it, we return
  // a neutral access result to play nice with other modules. If the end result
  // is still neutral, Drupal will deny access anyway unless the node grants
  // system allows the operation in a last ditch effort to determine access.
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_operation().
 */
function gnode_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->getEntityTypeId() == 'group' && \Drupal::moduleHandler()->moduleExists('views')) {
    /** @var \Drupal\group\Entity\GroupInterface $entity */
    if ($entity->hasPermission('access group_node overview', \Drupal::currentUser())) {
      /** @var \Symfony\Component\Routing\RouterInterface $router */
      $router = \Drupal::service('router.no_access_checks');
      if ($router->getRouteCollection()->get('view.group_nodes.page_1') !== NULL) {
        $operations['nodes'] = [
          'title' => t('Nodes'),
          'weight' => 20,
          'url' => Url::fromRoute('view.group_nodes.page_1', ['group' => $entity->id()]),
        ];
      }
    }
  }

  return $operations;
}
